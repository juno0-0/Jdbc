JDBC(Java DataBase Connectivity)란?
 - 데이터베이스에 연결 및 작업을 하기 위한 자바 표준 '인터페이스'
   ※ 데이터베이스 작업 : 데이터베이스 안에 있는 데이터를 조회, 수정, 삽입 등
 - 자바는 DBMS의 종류와 상관없이 JDBC API를 사용해서 데이터베이스 작업을 처리
 - Java와 DB의 중간에서 일종의 번역을 하는 역할

JDBC 관련 주요 인터페이스
 - Java.sql 패키지에 있음
 - Java.sql.Driver 
   · Driver를 관리하기 위한 인터페이스
   · DBMS에서 제공하는 Driver는 이 인터페이스를 참고해서 만듦

 - Java.sql.Connection
   · 특정 DB와 연결 정보를 가지고 있는 인터페이스 
   · DB에 연결을 시도하기 위해서는 DriverManager가 필요
       DriverManager는 Connection 객체를 리턴
       이 때 이 객체에는 연결된 DB의 연결 정보를 가지고 있음

 - Java.sql.Statement(보낼 때)
   · 데이터베이스에 Query문을 보낼 때 전송하는 방법을 정의하고 있는 인터페이스

 - Java.sql.ResultSet(받을 때)
   · Query문을 보냈을 때 받은 결과를 조회할 수 있는 여러가지 방법을 정의하고 있는 인터페이스

 - Java.sql.PreparedStatement
   · Statement의 서브 인터페이스
   · Query문을 미리 컴파일해서 보내기 때문에 실행 속도가 더 빠르다.

 - Java.sql.CallableStatement
   · PreparedStatement의 서브 인터페이스
   · 데이터베이스에 있는 Stored Procedure를 호출할 때 사용하는 인터페이스
     ※ Stored Procedure : 저장되어 있는 프로시저

 ※ Statement와 PreparedStatement의 차이
     - Statement는 정적쿼리, 즉 쿼리문에 값이 미리 입력되어 있어야 함
       · Connection 클래스의 createStatement()로 객체 생성
       · 단점 : SQL문을 매번 컴파일 후 사용하기 때문에 매번 SQL문을 지정해줘야 함★★
         ex) Connection con = DriverManager.getConnection();
 	  Statement st = con.createStatement();
              String quary = "insert 쿼리문"; 
              int n = st.executeUpdate(quary);

     - PreparedStatement는 동적쿼리, 즉 코드 실행 시점에서 SQL문이 동적으로 구성되고 실행
       · Connection 클래스의 prepareStatement(String sql)로 객체 생성
       · SQL문장이 "미리" 컴파일되고, 실행 시간동안 인수값을 위한 공간을 확보
           insert into 테이블명 values(값1, 값2, 값3)처럼 값이 변할 수 있는 부분을 제외한 나머지를
           미리 컴파일 해놓고, values에 들어오는 인수들의 공간을 확보하는 것
       · Statement 객체의 SQL은 실행될 때 매번 서버에서 분석해야 하지만,
          PreparedStatement 객체는 한 번 분석되면 재사용이 용이함
          각각의 인수에 대해 ?를 사용하여 SQL문장을 정의할 수 있게 해줌
           ex) Connection con = DriverManager.getConnection();
                String quary = "insert into 테이블명 values(?, ?, ?)";
                PreparedStatement pstmt = con.preparedStatement(quary);
                pstmt.setString(1, "name");
                pstmt.setInt(2, Integer.parseInt(age));
                pstmt.setString(3, "addr");
                int n = pstmt.executeUpdate(quary);
              
JDBC Driver를 로딩 -> DB와 연결 -> Query문 작성 -> 결과값을 활용 -> close()
        Driver            Connection       Statement         ResultSet


데이터베이스 연동을 위한 4가지 정보의 표본같은 것
만약 다른 db를 사용할 경우 ip주소와 포트번호를 수정
   String driver = "oracle.jdbc.driver.OracleDriver";
   String url = "jdbc:oracle:thin:@localhost:1521:xe";//thin : 자바로만 구현된 드라이버 타입, 
						  ip주소는 DBMS가 설치되어 있는 컴퓨터의 ip주소
   String userid="System";
   String passwd = "1234";

코딩 순서
 1. 드라이버 로딩(OracleDriver 클래스를 자바에서 이용하기 위해 JVM에 올리고 DriverManager에 등록)
   · Class.forName(driver)
     - 동적바인딩 메소드(프로그램 실행시 드라이버를 로딩)
     - 해당 드라이버가 없을 수도 있으니 예외처리가 필요

 2. 데이터베이스와 연결
     - Connection con = DriverManager.getConnection(url, user, pw);//연결이 안되는 경우를 대비해서 예외처리
        ※ DriverManager : 메모리에 로딩한 드라이버를 관리하는 클래스
            getConnection() : DriverManager가 가지고 있는 드라이버에 접속을 시도
		           Connection 객체를 리턴

 3. 데이터베이스에 sql문을 전송을 하기 위한 쿼리문 작성(Statement 객체)
     - String sql = "select name from Member";
        Statement st = con.createStatement();
                            ※ Connection의 객체인 con은 연결 정보를 가지고 있다.
                                createStatement() : Statement 객체를 리턴
		        이 부분이 OutputStream의 역할

 4. 데이터베이스에 sql문을 전송
     - ResultSet rs = st.executeQuery(sql);
        excuteQuery() : 쿼리문을 전송하고 DB에서 실행된 쿼리문의 결과를 ResultSet 타입으로 리턴

 5. 데이터베이스에서 데이터를 가져와서 출력
     - while(rs.next()) {//rs에 값이 없을때까지 반복
            String name = rs.getString("name");
	//String name = rs.getString(1);//칼럼의 이름을 모르는 경우 인덱스번호를 넣어서 순서대로 출력할 수 있다.
	System.out.println(name);
        }

 6. 데이터베이스와 연결된 자원을 반납(close())
     - if(rs!=null)rs.close();
        if(st!=null)st.close();
        if(con!=null)con.close();

DDL : create같은 명령어
DCL : 권한에 관련된 명령어
DML : 개발자가 자주 쓰는 명령어(select, insert, update, delete)

테이블에 값 넣기
 - 테이블에 있는 4개의 컬럼 중 3개의 칼럼에 값을 넣고 싶은 경우
    insert into 테이블명() value()에서 테이블명의 ()에 넣고 싶은 컬럼의 이름을 적고
    그 순서에 맞춰 value에 값을 넣어준다. (문자는 ''를 사용)

executeQurey()와 executeUpdate()의 차이점
 - executeQurey()는 SELECT를 사용할 때, 데이터를 가져올 때
                          ResultSet 타입의 객체를 리턴
 - executeUpdate()는 SELECT를 사용하지 않을 때(INSERT, DELETE 등), 데이터를 가져오지 않고 변경할 때
		    int를 리턴(insert/delete/update에서는 반영된 레코드의 건수를 리턴,
			     create/drop에서는 -1을 리턴)

execute(String sql) : 매개값으로 주어진 SQL문을 단지 실행시켜주는 역할
                          boolean타입을 리턴
                          true를 리턴하면 ResultSet(executeQurey())
                          false를 리턴하면 int(executeUpdate())
		  결과값을 getResultSet, getUpdateCount로 얻을 수 있다.

UPDATE문
 - UPDATE 테이블명 set 컬럼명1 = 값1 where 컬럼명2 = 값2;
    테이블에 있는 컬럼명2의 값이 값2면 컬럼명1의 값을 값1로 변경한다 
 
DELETE문
 - DELETE [FROM] 테이블명;
    테이블에 있는 로우 모두 삭제
 - DELETE [FROM] 테이블명 where 컬럼명 = 값;
    테이블에 있는 컬럼명 = 값과 일치하는 로우 삭제

호스트명 찾는 법
 - C:\oraclexe\app\oracle\product\11.2.0\server\network\ADMIN.tnsnames.ora 파일에 들어가면
   (HOST = 호스트명)(PORT = 포트번호)
   (SERVICE_NAME = XE) <- SID를 알 수 있다.

오라클과 DB 연동하기
 - Window → show view → Data Source Explorer
    → Database Connections 우클릭 → new → 일치하는 DB 선택 → name 설정 → 
    → next → Drivers: 선택 안되면 오른쪽에 new driver definition 아이콘 클릭 
    → 11g버전이니까 Oracle Thin Driver 11version 선택 
    → 위 목록에 JAR List에서 새로 생긴 것 지우고 Ad JAR/ZIP... 들어가서 
        C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib 이 경로에 있는 JAR 추가하고 OK 
    → SID값 입력, HOST는 위에 호스트명 찾는 법에서 찾기, User name에 오라클 id, Password에 오라클 pw입력하고
        Save password 체크
    → Test Connection으로 연동 확인하고 되면 Finish
    → Database Connections로 돌아가서 새로 생긴 DB안에 SID이름 선택
    → 위에 Open scrapbook to edit SQL statement 누르면 워크시트 생성
    → SQL문 입력하고 탭 잡아서 우클릭해서 execute하거나 Alt+X 누르기(전체를 하고 싶으면 Crtl+Alt+X)

close() 같은 경우 자주 사용하기 때문에 메소드로 만들 수 있다.

Date
 - 자바에서 String sql = "insert into person values(?,?,?,?)"처럼(날짜만)
     로우를 생성할 때 날짜를 입력해야 하는 경우
     pstmt.setDate(int, java.sql.Date)를 사용
     java.util.Date클래스의 getTime()을 java.sql.Date클래스의 생성자 매개값으로 넣어준 뒤
     객체를 매개값으로 넘겨주는 것.
     ex) Date date = new Date();
          java.sql.Date sqlDate = new java.sql.Date(date.getTime());
          pstmt.setDate(4, sqlDate);
     ※ 하지만 이 방식을 사용하면 년, 월, 일만 입력되고 시간은 입력되지 않는다.
 
 - 만약 시, 분, 초까지 입력하고 싶은 경우(날짜와 시간)
     pstmt.setTimestamp(int, java.sql.Timestamp)를 사용
     Date클래스가 아닌 java.sql.Timestamp클래스를 호출하여 매개값으로 java.util.Date클래스의 getTime()을 준다.
     ex) Timestamp tsDate = new Timestamp(new Date().getTime());
          pstmt.setTimestamp(4, tsDate);

 - 시, 분, 초만 입력하고 싶은 경우(시간만)
     pstmt.setTime(int, java.sql.Time)를 사용
     java.sql.Time클래스를 호출하여 매개값으로 동일하게 getTime()을 준다.
     ex) Time time = new Time(new Date().getTime());
          pstmt.setTime(4, time);
          여기서 결과로 1970-01-01 시, 분, 초가 나오게 되는데
          1970년 1월 1일은 기준일, (0으로 보면 된다.)
     
기본 자료형에 null값을 넣는 방법
 - preparedStatement의 setNull(index, Types.INTEGER)
    정수형 타입을 null로 설정 : java.sql.Types.INTEGER -> INTEGER = 상수로 정의되어 있는 멤버
                                      pstmt.setInt(1, new Integer(null)); 사용할 수 없음
    실수형 타입을 null로 설정 : java.sql.Types.DOUBLE
    숫자형 타입을 null로 설정 : java.sql.Types.NUMERIC -> 정수 or 실수를 저장할 수 있다, NUMBER와 동일
    문자형 타입을 null로 설정 : java.sql.Types.VARCHAR / setString(pindex, null)도 상관없음
     ex) pstmt.setNull(1, Types.INTEGER);
          pstmt.setString(2, null);
          pstmt.setNull(3, Types.DOUBLE);
          pstmt.setNull(4, Types.DATE);

Scrollable ResultSet의 기능
 - 양방향 스크롤이 가능(커서의 위치를 임의로 조절 가능)
    ResultSet은 단방향 스크롤만 가능(로우가 1번부터 순서대로 next()로 호출)
 - ResultSet에 Update 기능이 추가된 것(수정이 가능하다는 의미)

 - ResultSet Type 관련 상수
   1) TYPE_FORWARD_ONLY : 커서 이동시 next()만 사용가능
			 스크롤이 불가능한 Forward Only형
   2) TYPE_SCROLL_INSENSITIVE : 양방향 스크롤은 가능하지만 변경된 사항은 적용이 안된다.
   3) TYPE_SCROLL_SENSITIVCE : 양방향 스크롤이 가능하며 변경된 사항이 적용된다.

 - Concurrency Type 관련 상수
   1) CONCUR_READ_ONLY : 읽기 전용
			커서의 위치에서 ResultSet 오브젝트의 변경이 불가능
   2) CONCUR_UPDATEABLE : 데이터 동적 갱신 가능
			 커서의 위치에서 ResultSet 오브젝트의 변경이 가능

 - 사용가능한 Method
   1) next() : Cursor를 다음 Row로 이동
   2) previous() : Cursor를 이전 Row로 이동
   3) first() : Cursor를 ResultSet의 처음으로 이동
   4) last() : Cursor를 ResultSet의 마지막으로 이동
   5) isFirst() : 현재 Cursor의 위치가 첫 Row인지 확인
   6) isLast() : 현재 Cursor의 위치가 마지막 Row인지 확인
   7) getType() : ResultSet의 타입을 리턴(위에 ResultSet Type)
   8) getConcurrency() : Concurrency의 타입을 리턴(위에 Concurrency Type)
   9) getRow() : 현재 Cursor가 가르키고 있는 Row번호
   10) beforeFirst() : 처음 레코드 전으로 Cursor 이동(1번 레코드 바로 위로 이동, 가르키는 레코드가 없는 상태)
   11) afterLast() : 마지막 레코드 이후로 Cursor 이동(마지막 레코드 바로 아래로 이동, 가르키는 레코드가 없는 상태)
   12) absolute() : 매개값이 양수면 "첫" Row부터 매개값만큼 앞으로 Cursor 이동
		           음수면 "마지막" Row부터 매개값만큼 뒤로 Cursor 이동
   13) relative() : "현 위치"에서 매개값만큼 앞(양수)/뒤(음수)로 Cursor 이동

 - ResultSet 타입과 Concurrency 타입 선언 예시
    Statement st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				  ResultSet.CONCUR_UPDATEALBLE);
    Statement 객체를 생성할 때 타입 선언
